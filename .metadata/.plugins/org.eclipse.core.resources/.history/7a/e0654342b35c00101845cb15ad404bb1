///*
// * Copyright (c) 2006-2021, RT-Thread Development Team
// *
// * SPDX-License-Identifier: Apache-2.0
// *
// * Change Logs:
// * Date           Author       Notes
// * 2025-06-30     lenovo       the first version
// */
//
//#include <SPI.h>
//#include <Wire.h>
//
//#include "MENU.h"
//#include "slider.h"
//
//#include "rtthread.h"
//#include "RTduino.h"
//
//
//U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);
//
//// '新建项目', 128x64px
//const unsigned char epd_bitmap_____ [] PROGMEM = {
//    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
//    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//    0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
//    0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//    0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
//    0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//    0x03, 0x95, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
//    0x04, 0x42, 0x40, 0x00, 0x00, 0x03, 0x83, 0x87, 0x03, 0xc3, 0x87, 0x80, 0x00, 0x00, 0x00, 0x00,
//    0x05, 0x43, 0x40, 0x00, 0x00, 0x04, 0x44, 0x41, 0x04, 0x44, 0x44, 0x40, 0x00, 0x00, 0x00, 0x02,
//    0x04, 0x42, 0x40, 0x00, 0x00, 0x04, 0x00, 0x41, 0x04, 0x40, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00,
//    0x03, 0x83, 0x40, 0x00, 0x00, 0x04, 0x03, 0xc1, 0x04, 0x43, 0xc4, 0x40, 0x00, 0x00, 0x00, 0x02,
//    0x01, 0x22, 0x40, 0x00, 0x00, 0x04, 0x04, 0x41, 0x04, 0x44, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00,
//    0x09, 0x43, 0x40, 0x00, 0x00, 0x04, 0x44, 0x41, 0x04, 0x44, 0x44, 0x40, 0x00, 0x00, 0x00, 0x02,
//    0x05, 0x82, 0x40, 0x00, 0x00, 0x03, 0x83, 0xc7, 0xc3, 0xc3, 0xc4, 0x40, 0x00, 0x00, 0x00, 0x00,
//    0x03, 0x44, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
//    0x05, 0x44, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//    0x05, 0x43, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
//    0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
//    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
//    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
//    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
//    0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7,
//    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x37,
//    0x41, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x32,
//    0x40, 0x91, 0x80, 0x00, 0x00, 0x07, 0x8f, 0x87, 0xcf, 0x07, 0x8f, 0x80, 0x0b, 0x00, 0x00, 0x30,
//    0x40, 0x92, 0x40, 0x00, 0x00, 0x0c, 0xcc, 0xc3, 0x03, 0x0c, 0xcc, 0xc0, 0x03, 0x00, 0x00, 0x32,
//    0x40, 0x90, 0x80, 0x00, 0x00, 0x0c, 0xcc, 0xc3, 0x03, 0x0c, 0xcc, 0xc0, 0x03, 0x00, 0x00, 0x30,
//    0x40, 0xf1, 0x00, 0x00, 0x00, 0x0c, 0xcc, 0xc3, 0x03, 0x0c, 0xcc, 0xc0, 0x03, 0x00, 0x00, 0x32,
//    0x40, 0xb0, 0x00, 0x00, 0x00, 0x0c, 0xcc, 0xc3, 0x03, 0x0c, 0xcc, 0xc0, 0x03, 0x00, 0x00, 0x30,
//    0x40, 0xd1, 0x00, 0x00, 0x00, 0x0c, 0xcc, 0xc3, 0x03, 0x0c, 0xcc, 0xc0, 0x03, 0x00, 0x00, 0x32,
//    0x40, 0xb0, 0x00, 0x00, 0x00, 0x07, 0x8f, 0x81, 0xcf, 0xc7, 0x8c, 0xc0, 0x0f, 0xc0, 0x00, 0x30,
//    0x4a, 0x60, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
//    0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
//    0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
//    0x43, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
//    0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
//    0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc2,
//    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
//    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//    0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
//    0x07, 0xe2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//    0x04, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
//    0x04, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//    0x04, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x02,
//    0x04, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
//    0x05, 0x13, 0x80, 0x00, 0x00, 0x0e, 0x1e, 0x0f, 0x1c, 0x0e, 0x1e, 0x00, 0x01, 0x00, 0x00, 0x02,
//    0x05, 0x12, 0x80, 0x00, 0x00, 0x11, 0x11, 0x04, 0x04, 0x11, 0x11, 0x00, 0x02, 0x00, 0x00, 0x00,
//    0x05, 0x13, 0x80, 0x00, 0x00, 0x11, 0x11, 0x04, 0x04, 0x11, 0x11, 0x00, 0x04, 0x00, 0x00, 0x02,
//    0x04, 0xe2, 0x00, 0x00, 0x00, 0x11, 0x11, 0x04, 0x04, 0x11, 0x11, 0x00, 0x08, 0x00, 0x00, 0x00,
//    0x04, 0x02, 0x00, 0x00, 0x00, 0x11, 0x11, 0x04, 0x04, 0x11, 0x11, 0x00, 0x10, 0x00, 0x00, 0x02,
//    0x04, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x04, 0x04, 0x11, 0x11, 0x00, 0x10, 0x00, 0x00, 0x00,
//    0x04, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x1e, 0x03, 0x1f, 0x0e, 0x11, 0x00, 0x1f, 0x00, 0x00, 0x02,
//    0x04, 0x02, 0x80, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//    0x04, 0x02, 0x80, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
//    0x0a, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
//    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//
//// 'chengfen', 16x16px
//const unsigned char epd_bitmap_chengfen [] PROGMEM = {
//    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x04, 0x8c, 0x04, 0x92, 0x04, 0x84, 0x07, 0x88,
//    0x05, 0x80, 0x06, 0x88, 0x05, 0x80, 0x53, 0x00, 0x48, 0x00, 0x20, 0x00, 0x1c, 0x00, 0x00, 0x00
//};
//// 'diandi', 16x16px
//const unsigned char epd_bitmap_diandi [] PROGMEM = {
//    0x00, 0x18, 0x7e, 0x20, 0x42, 0x10, 0x4c, 0x08, 0x44, 0x30, 0x4a, 0x00, 0x51, 0x38, 0x51, 0x28,
//    0x51, 0x38, 0x4e, 0x20, 0x40, 0x20, 0x40, 0x00, 0x40, 0x30, 0x40, 0x28, 0x40, 0x28, 0xa0, 0x30
//};
//// 'xinxi', 16x16px
//const unsigned char epd_bitmap_xinxi [] PROGMEM = {
//    0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x4d, 0x00, 0x4b, 0x00, 0x49, 0x18, 0xe9, 0x24, 0x00,
//    0x24, 0xe6, 0x18, 0x89, 0x24, 0xe9, 0x66, 0x89, 0x5a, 0x86, 0x42, 0x00, 0x42, 0x00, 0x42, 0x00
//};
//// 'geiyao', 16x16px
//const unsigned char epd_bitmap_geiyao [] PROGMEM = {
//    0x00, 0x00, 0x00, 0x00, 0x53, 0xdc, 0xda, 0x12, 0xab, 0xd2, 0x8a, 0x12, 0x8b, 0xdc, 0x00, 0x00,
//    0x60, 0x00, 0x90, 0x00, 0x88, 0x00, 0x44, 0x00, 0x2e, 0x00, 0x1f, 0x00, 0x0f, 0x00, 0x06, 0x00
//};
//// 'huanjing', 16x16px
//const unsigned char epd_bitmap_huanjing [] PROGMEM = {
//    0x0e, 0x00, 0x01, 0x00, 0x04, 0x80, 0x02, 0x40, 0x39, 0x58, 0x44, 0x24, 0x54, 0x34, 0x44, 0x24,
//    0x38, 0x34, 0x12, 0x24, 0x94, 0x34, 0x58, 0x24, 0x34, 0x42, 0x54, 0x42, 0x54, 0x3c, 0x7c, 0x00
//};
//
//// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 240)
//const unsigned char* bitmap_icons[5] = {
//    epd_bitmap_huanjing,
//    epd_bitmap_chengfen,
//    epd_bitmap_diandi,
//    epd_bitmap_geiyao,
//    epd_bitmap_xinxi
//};
//
//// 'beijing', 128x22px
//const unsigned char epd_bitmap_beijing [] PROGMEM = {
//    0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0,
//    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
//    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
//    0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
//    0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0,
//    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//
///******************函数处理*******************/
//int button_up_clicked = 0;
//int button_down_clicked = 0;
//
//const int NUM_ITEMS = 5;
//int item_selected = 0;
//unsigned long last_button_time = 0;
//
//char menu_item[NUM_ITEMS][20] = {
//    "环境监测",
//    "成分分析",
//    "点滴滴速",
//    "给药情况",
//    "个人信息"
//
//};
//
//int item_sel_previous;
//int item_sel_next;
//
//static void handleButtons(void) {
//    // up and down buttons only work for the menu screen
//    if ((digitalRead(BUTTON_UP_PIN) == LOW) && (button_up_clicked == 0)) { // up button clicked - jump to previous menu item
//      item_selected = item_selected - 1; // select previous item
//      button_up_clicked = 1; // set button to clicked to only perform the action once
//       if (item_selected < 0) { // if first item was selected, jump to last item
//       item_selected = NUM_ITEMS-1;
//     }
//    }
//    else
//        if ((digitalRead(BUTTON_DOWN_PIN) == LOW) && (button_down_clicked == 0)) { // down button clicked - jump to next menu item
//      item_selected = item_selected + 1; // select next item
//      button_down_clicked = 1; // set button to clicked to only perform the action once
//      if (item_selected >= NUM_ITEMS) { // last item was selected, jump to first menu item
//        item_selected = 0;
//        }
//    }
//
//    if ((digitalRead(BUTTON_UP_PIN) == HIGH) && (button_up_clicked == 1)) { // unclick
//      button_up_clicked = 0;
//    }
//    if ((digitalRead(BUTTON_DOWN_PIN) == HIGH) && (button_down_clicked == 1)) { // unclick
//      button_down_clicked = 0;
//    }
//
//  item_sel_previous = item_selected - 1;
//  if(item_sel_previous < 0){item_sel_previous = NUM_ITEMS - 1;}
//  item_sel_next = item_selected + 1;
//  if(item_sel_next >= NUM_ITEMS){item_sel_next = 0;}
//}
//
//static void drawMenu(void) {
//
//        // 绘制背景
//        u8g2.drawBitmap(0, 22, 128/8, 22, epd_bitmap_beijing);
//
//        // 绘制上一项
//        u8g2.setFont(u8g2_font_wqy12_t_gb2312);
//        u8g2.drawUTF8(40, 18, menu_item[item_sel_previous]);
//        u8g2.drawBitmap(4, 2, 16/8, 16, bitmap_icons[item_sel_previous]);
//
//        // 绘制当前选中项
//        u8g2.setFont(u8g2_font_wqy12_t_gb2312);
//        u8g2.drawUTF8(40, 38, menu_item[item_selected]);
//        u8g2.drawBitmap(4, 24, 16/8, 16, bitmap_icons[item_selected]);
//
//        // 绘制下一项
//        u8g2.drawUTF8(40, 59, menu_item[item_sel_next]);
//        u8g2.drawBitmap(4, 45, 16/8, 16, bitmap_icons[item_sel_next]);
//}
//
////***************************功能显示******************************/
////
////extern rt_mq_t Slider_MQ_Dis;
////
////****************************slider切换界面*********************/
////static rt_sem_t trans_done_semphr = RT_NULL;
////static rt_thread_t sld_thread = RT_NULL;
////
////static struct rt_device_pwm *pwm_dev;
////
////中断处理
////void capsense_isr(void)
////{
////    rt_interrupt_enter();
////    Cy_CapSense_InterruptHandler(CYBSP_CSD_HW, &cy_capsense_context);
////    rt_interrupt_leave();
////}
////
////释放信号量
////void capsense_callback(cy_stc_active_scan_sns_t *ptrActiveScan)
////{
////    rt_sem_release(trans_done_semphr);
////}
////
////触摸滑条初始化
////uint32_t initialize_capsense(void)
////{
////    uint32_t status = CYRET_SUCCESS;
////
////    /* CapSense interrupt configuration parameters */
////    static const cy_stc_sysint_t capSense_intr_config =
////    {
////        .intrSrc = csd_interrupt_IRQn,
////        .intrPriority = CAPSENSE_INTR_PRIORITY,
////    };
////
////    /* Capture the CSD HW block and initialize it to the default state. */
////    status = Cy_CapSense_Init(&cy_capsense_context);
////    if (CYRET_SUCCESS != status)
////    {
////        return status;
////    }
////
////    /* Initialize CapSense interrupt */
////    cyhal_system_set_isr(csd_interrupt_IRQn, csd_interrupt_IRQn, CAPSENSE_INTR_PRIORITY, &capsense_isr);
////    NVIC_ClearPendingIRQ(capSense_intr_config.intrSrc);
////    NVIC_EnableIRQ(capSense_intr_config.intrSrc);
////
////    /* Initialize the CapSense firmware modules. */
////    status = Cy_CapSense_Enable(&cy_capsense_context);
////    if (CYRET_SUCCESS != status)
////    {
////        return status;
////    }
////
////    /* Assign a callback function to indicate end of CapSense scan. */
////    status = Cy_CapSense_RegisterCallback(CY_CAPSENSE_END_OF_SCAN_E,
////                                          capsense_callback, &cy_capsense_context);
////    if (CYRET_SUCCESS != status)
////    {
////        return status;
////    }
////    return status;
////}
////
//// void Slider_Init(void)
//// {
////
////    cy_rslt_t result;
////
////    result = initialize_capsense();
////
////    if (CYRET_SUCCESS != result)
////    {
////        /* Halt the CPU if CapSense initialization failed */
////        RT_ASSERT(0);
////    }
////    /* Initiate first scan */
////    Cy_CapSense_ScanAllWidgets(&cy_capsense_context);
////
////    trans_done_semphr = rt_sem_create("slider_sem", 0, RT_IPC_FLAG_PRIO);
////    if (trans_done_semphr == RT_NULL)
////    {
////        rt_kprintf("create transform done semphr failed.\n");
////        RT_ASSERT(0);
////        return;
////    }
////}
////
//// void process_touch(void)
////{
////    cy_stc_capsense_touch_t *slider_touch_info;
////    uint16_t slider_pos;
////    uint8_t slider_touch_status;
////    bool led_update_req = false;
////
////    static uint16_t slider_pos_prev;
////
////    /* Get slider status */
////    slider_touch_info = Cy_CapSense_GetTouchInfo(
////                            CY_CAPSENSE_LINEARSLIDER0_WDGT_ID, &cy_capsense_context);
////    slider_touch_status = slider_touch_info->numPosition;
////    slider_pos = slider_touch_info->ptrPosition->x;
////
////    /* Detect the new touch on slider */
////    if ((RT_NULL != slider_touch_status) &&
////            (slider_pos != slider_pos_prev))
////    {
////        if(slider_pos > slider_pos_prev){
////            current_screen = 1;
////        }
////        if(slider_pos < slider_pos_prev){
////            current_screen = 0;
////
////        }
////    }
////    slider_pos_prev = slider_pos;
////}
//
//
////static void Slider_thread_entry(void *parameter)
////{
////    Slider_Init();
////
////    for (;;)
////    {
////        rt_err_t result;
////        rt_sem_take(trans_done_semphr, RT_WAITING_FOREVER);
////
////        /* Process all widgets */
////        Cy_CapSense_ProcessAllWidgets(&cy_capsense_context);
////
////        /* Process touch input */
////        process_touch();
////        Cy_CapSense_RunTuner(&cy_capsense_context);
////
////        /* Initiate next scan */
////        Cy_CapSense_ScanAllWidgets(&cy_capsense_context);
////
////        rt_thread_mdelay(50);
////    }
////}
//
////int Slider(void)
////{
////    rt_err_t ret = RT_EOK;
////
////    sld_thread = rt_thread_create("slider_th",
////                                  Slider_thread_entry,
////                                  RT_NULL,
////                                  1024,
////                                  25,
////                                  10);
////    if (sld_thread != RT_NULL)
////    {
////        rt_thread_startup(sld_thread);
////    }
////    else
////    {
////        ret = -RT_ERROR;
////    }
////
////    return ret;
////}
//
//
//
///***************************菜单初始化和功能**********************/
//void setup() {
//
//    u8g2.begin();          // 初始化显示[1](@ref)
//    u8g2.enableUTF8Print();  // 启用UTF-8支持[6,7](@ref)
//    u8g2.setFont(u8g2_font_wqy12_t_gb2312);  // 设置中文字体[6,7](@ref)
//
//    pinMode(BUTTON_UP_PIN, INPUT_PULLUP);
//    pinMode(BUTTON_DOWN_PIN, INPUT_PULLUP);
//
//  u8g2.setFont(u8g2_font_ncenB18_tf);  // 更新字体名称[1](@ref)
//  u8g2.setDrawColor(1);  // 设置绘制颜色（1=白色）
//
//
//}
//
//void loop() {
//    handleButtons();  // 处理按键输入
//       u8g2.firstPage();
//
//       do {
//       drawMenu();
//
//       }    // 绘制菜单界面
//    while (u8g2.nextPage());
//    delay(30);        // 控制刷新率
//
//}
